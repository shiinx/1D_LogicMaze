module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  sig rst;                  // reset signal

   .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
//      multi_seven_seg seg;
      levelgen lg;
      play play;
    }
  }

  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    if(io_dip[2][5]==1){
    play.alufn1 = lg.alufn1;
    play.a = io_dip[2][7];
    play.b = io_dip[2][6];
       play.alufn2 = lg.alufn2;
      play.alufn3 = lg.alufn3;
    play.c = io_dip[2][4];
    play.d = io_dip[2][3];
    io_led[2][7] = play.out;
    
    
    }
    else{
        play.alufn1 = lg.alufn1;
        play.a = io_dip[2][7];
        play.b = io_dip[2][6];
          play.alufn2 = lg.alufn2;
      play.alufn3 = lg.alufn3;
        play.c = io_dip[2][7];
        play.d = io_dip[2][6];
      
      
      }
    
    
    
  }
}