module fsm_main (
    input clk,  // clock
    input btn_ready,
    input a,
    input b,
    input c,
    input d,
    input flag,
    input rst,  // reset
    output out,
    input threesig[3],
    output led1[3],
    output led2[3],
    output led3[3],
    output inv11,
    output inv22,
    output inv33,
    output delay,
    output debugcheck[3]
    
  ) {
  //timer t(.clk(clk) , .rst(rst));
  dff alufn1[6](.clk(clk));
  dff alufn2[6](.clk(clk));
  dff alufn3[6](.clk(clk));
  dff inv1(.clk(clk)) ;
  dff inv2(.clk(clk));
  dff inv3(.clk(clk));
  dff led11[3](.clk(clk));
  dff led22[3](.clk(clk));
  dff led33[3](.clk(clk));
  dff outt(.clk(clk));
  dff index[7]( .clk(clk) , .rst(rst));
  dff score[5](.clk(clk) , .rst(rst));
  levelgen lg(.clk(clk), .rst(rst));
  
  fsm state( #INIT(GENERATELVL),.clk(clk), .rst(rst)) = {GENERATELVL, STANDBY, PLAY, CORRECT, GAMEOVER};
    validation validate;
  play play(.clk(clk), .rst(rst));

  always {
  
  //  if(add ==1){
    //lolclock.d= lolclock.q + 10;
      
     // }
    lg.select = index.q;
    lg.inv11 = threesig[0];
    lg.inv22 = threesig[1];
    lg.inv33 = threesig[2];
    out = outt.q;
    led1 = led11.q;
    led2 = led22.q;
    led3 = led33.q;
    inv11 = inv1.q;
    inv22 = inv2.q;
    inv33 = inv3.q;//inv3.q;
    debugcheck =b100;    
    //STOP USING THE LG IF YOU WANT TO INCREMENT BY 1 only
    validate.alufn1 = 0;//lg.alufn1;
        validate.alufn2 = 0;//lg.alufn2;
        validate.alufn3 = 0;//lg.alufn3;
        validate.inv1 = 0;//lg.inv1;                
        validate.inv2 = 0;//lg.inv2;
        validate.inv3 = 0;//lg.inv3;
       play.a = a;
        play.b = b;
        play.c = c;
        play.d = d;
        play.alufn1 = lg.alufn1;
        play.alufn2 = lg.alufn2;
        play.alufn3 = lg.alufn3;
        play.inv1 = lg.inv1;
        play.inv2 = lg.inv2;
        play.inv3 = lg.inv3;
        delay = 0;
  //  t.add = 0;
  //  if(t.out == b00001111){
 //   state.d = state.GAMEOVER;
 //     }
     //   led11.d = lg.led1;
       // led22.d = lg.led2;
     //   led33.d = lg.led3;
     ////   inv1.d = lg.inv1;
     //   inv2.d = lg.inv2;
     //   inv3.d = lg.inv3;
    case(state.q){
      
      state.GENERATELVL:
          
         index.d= index.q+1;
        lg.select = index.q;
        validate.alufn1 = lg.alufn1;
        if(outt.q ==1){
        outt.d= 0;
        out = 0;
        }
          lg.inv11 = threesig[0];
    lg.inv22 = threesig[1];
    lg.inv33 = threesig[2];
        validate.alufn2 = lg.alufn2;
        validate.alufn3 = lg.alufn3;
        validate.inv1 = lg.inv1;                
        validate.inv2 = lg.inv2;
        validate.inv3 = lg.inv3;

        alufn1.d = lg.alufn1;
        alufn2.d = lg.alufn2;
        alufn3.d = lg.alufn3;
        inv1.d = lg.inv1;
        inv2.d = lg.inv2;
        inv3.d = lg.inv3;
          led11.d = lg.led1;
        led22.d = lg.led2;
        led33.d = lg.led3;
        debugcheck = b000;
       delay = 0;
        if(validate.out == 0){
          state.d = state.STANDBY;
        }else{
          state.d = state.GENERATELVL;
        }
         if(flag ==0){
        state.d = state.GAMEOVER;
          }
      state.STANDBY:
       debugcheck = b001;
        delay = 0;
        if(btn_ready == 1){
          state.d = state.PLAY;
        }else{
          state.d = state.STANDBY;
        }
         if(flag ==0){
        state.d = state.GAMEOVER;
          }
      state.PLAY:
        
        play.a = a;
        play.b = b;
        play.c = c;
        play.d = d;
        play.alufn1 = alufn1.q;
        play.alufn2 = alufn2.q;
        play.alufn3 = alufn3.q;
        play.inv1 = 0;//inv1.q;
        play.inv2 = 0;//inv2.q;
        play.inv3 = 0;//inv3.q;
        outt.d = play.out;
        debugcheck  =b010;
        
        if(outt.q == 0){
          state.d = state.PLAY;
        }else{
       //s t.add = 1;
          score.d = score.q +1;
        index.d = index.q+1;
          state.d = state.CORRECT;
          delay = 1;
        }
         if(flag ==0){
        delay= 0;
        state.d = state.GAMEOVER;
          }
        state.CORRECT:
      debugcheck=b011;
        delay = 1;
          //outt.d = 1;
         // index.d = index.q+1;
         // out = outt.q;
          
          state.d = state.GENERATELVL;
      state.GAMEOVER:
      delay = 0;
       debugcheck = b101;
        state.d = state.GAMEOVER;
        
        
    }
  
  }
}
