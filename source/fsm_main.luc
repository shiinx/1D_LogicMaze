module fsm_main (
    input clk,  // clock
    input btn_ready,
    input a,
    input b,
    input c,
    input d,
    input rst,  // reset
    output out,
    output led1[3],
    output led2[3],
    output led3[3],
    output inv11,
    output inv22,
    output inv33

    
  ) {
  
  dff alufn1[6](.clk(clk));
  dff alufn2[6](.clk(clk));
  dff alufn3[6](.clk(clk));
  dff inv1(.clk(clk)) ;
  dff inv2(.clk(clk));
  dff inv3(.clk(clk));
  dff led11[3](.clk(clk));
  dff led22[3](.clk(clk));
  dff led33[3](.clk(clk));
  dff outt(.clk(clk));
  levelgen lg(.clk(clk), .rst(rst));

  fsm state( #INIT(GENERATELVL),.clk(clk), .rst(rst)) = {GENERATELVL, STANDBY, PLAY, CORRECT, GAMEOVER};
    validation validate;
  play play(.clk(clk), .rst(rst));

  always {
    
   
     //   led11.d = lg.led1;
       // led22.d = lg.led2;
     //   led33.d = lg.led3;
     ////   inv1.d = lg.inv1;
     //   inv2.d = lg.inv2;
     //   inv3.d = lg.inv3;
    case(state.q){
      
      state.GENERATELVL:
        validate.alufn1 = lg.alufn1;
        
        validate.alufn2 = lg.alufn2;
        validate.alufn3 = lg.alufn3;
        validate.inv1 = lg.inv1;                
        validate.inv2 = lg.inv2;
        validate.inv3 = lg.inv3;

        alufn1.d = validate.alufn11;
        alufn2.d = validate.alufn22;
        alufn3.d = validate.alufn33;
        inv1.d = validate.inv11;
        inv2.d = validate.inv22;
        inv3.d = validate.inv33;
          led11.d = lg.led1;
        led22.d = lg.led2;
        led33.d = lg.led3;
        
        if(validate.out == 0){
          state.d = state.STANDBY;
        }else{
          state.d = state.GENERATELVL;
        }
      state.STANDBY:
        if(btn_ready == 1){
          state.d = state.PLAY;
        }else{
          state.d = state.STANDBY;
        }
      state.PLAY:
        play.a = a;
        play.b = b;
        play.c = c;
        play.d = d;
        play.alufn1 = alufn1.q;
        play.alufn2 = alufn2.q;
        play.alufn3 = alufn3.q;
        play.inv1 = inv1.q;
        play.inv2 = inv2.q;
        play.inv3 = inv3.q;
        outt.d = play.out;
        
        if(play.out == 0){
          state.d = state.PLAY;
        }else{
          state.d = state.CORRECT;
        }
      state.CORRECT:
          outt.d = 1;
          out = 1;
        
    }
       out = outt.q;
  led1 = led11.q;
    led2 = led22.q;
    led3 = led33.q;
    inv11 = inv1.q;
    inv22 = inv2.q;
    inv33 = inv3.q;//inv3.q;
    validate.alufn1 = lg.alufn1;
        validate.alufn2 = lg.alufn2;
        validate.alufn3 = lg.alufn3;
        validate.inv1 = lg.inv1;                
        validate.inv2 = lg.inv2;
        validate.inv3 = lg.inv3;
       play.a = 0;
        play.b = 0;
        play.c = 0;
        play.d = 0;
        play.alufn1 = lg.alufn1;
        play.alufn2 = lg.alufn2;
        play.alufn3 = lg.alufn3;
        play.inv1 = lg.inv1;
        play.inv2 = lg.inv2;
        play.inv3 = lg.inv3;
  }
}
